{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/ng-cli-compat",
        "plugin:@angular-eslint/ng-cli-compat--formatting-add-on",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "@angular-eslint/component-class-suffix": [
          "error",
          {
            "suffixes": [
              "Component"
            ]
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-class-suffix": [
          "error",
          {
            "suffixes": [
              "Directive"
            ]
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "kebab-case"
          }
        ],
        "@angular-eslint/no-attribute-decorator": "error",
        "@angular-eslint/no-forward-ref": "error",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "off",
        //Бан используемых типов
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Object": {
                "message": "Use {} instead."
              },
              "any": {
                "message": "Specify class for current situation."
              }
            },
            "extendDefaults": false
          }
        ],
        "@typescript-eslint/consistent-type-assertions": "off",
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "constructors": "no-public"
            }
          }
        ],
        "@typescript-eslint/indent": ["error", 4, {"SwitchCase": 1, "FunctionExpression": {"parameters": "first"}}],
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "semi",
              "requireLast": false
            }
          }
        ],
        "@typescript-eslint/member-ordering": "off",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": [
          "error",
          {
            "allow": [
              "constructors"
            ]
          }
        ],
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-shadow": [
          "error",
          {
            "hoist": "all"
          }
        ],
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/prefer-for-of": "off",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/quotes": [
          "error",
          "double",
          {
            "avoidEscape": true
          }
        ],
        "@typescript-eslint/semi": [
          "error",
          "always"
        ],
        "@typescript-eslint/triple-slash-reference": [
          "error",
          {
            "path": "always",
            "types": "prefer-import",
            "lib": "always"
          }
        ],
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unified-signatures": "error",
        "arrow-body-style": "error",
        "arrow-parens": [
          "error",
          "as-needed"
        ],
        "comma-dangle": "error",
        "complexity": "off",
        "constructor-super": "error",
        "curly": "error",
        "dot-notation": "error",
        "eol-last": "error",
        "eqeqeq": [
          "error",
          "always"
        ],
        "guard-for-in": "error",
        "id-denylist": "error",
        "id-match": "error",
        "import/no-deprecated": "warn",
        "import/order": "off",
        "jsdoc/check-alignment": "error",
        "no-use-before-define": ["error", { "functions": true, "classes": true }],
        "jsdoc/newline-after-description": "error",
        "max-classes-per-file": "off",
        "max-len": [
          "error",
          {
            "code": 170
          }
        ],
        "new-parens": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-cond-assign": "error",
        "no-console": [
          "error",
          {
            "allow": [
              "log",
              "warn",
              "dir",
              "timeLog",
              "assert",
              "clear",
              "count",
              "countReset",
              "group",
              "groupEnd",
              "table",
              "dirxml",
              "error",
              "groupCollapsed",
              "Console",
              "profile",
              "profileEnd",
              "timeStamp",
              "context"
            ]
          }
        ],
        "no-debugger": "error",
        "no-empty": "error",
        "no-eval": "error",
        "no-fallthrough": "off",
        "no-invalid-this": "off",
        "no-new-wrappers": "error",
        "no-shadow": "off",
        "no-throw-literal": "error",
        "no-trailing-spaces": [
          "error",
          {
            "skipBlankLines": true
          }
        ],
        "no-undef-init": "error",
        "no-underscore-dangle": "off",
        "no-unsafe-finally": "error",
        "no-unused-expressions": "error",
        "no-unused-labels": "error",
        "no-var": "error",
        "object-shorthand": "error",
        "one-var": [
          "off",
          "never"
        ],
        "@typescript-eslint/typedef": [
          "error",
          {
            "arrowParameter": true,
            "variableDeclaration": true
          }
        ],
        // Проверяет возвращаемые типы свойств интерфейса и спецификатор типа параметров функции для функций без стрелок.
        "@typescript-eslint/explicit-function-return-type": [
          "error"
        ],
        // Требование чтобы у функций было возвращаемое значение
        "@typescript-eslint/explicit-module-boundary-types": [
          "error",
          {
            "allowedNames": [
              "ignoredFunctionName",
              "ignoredMethodName"
            ]
          }
        ],
        // Можно писать тип данных, даже если они явно указанны (присвоены).
        "@typescript-eslint/no-inferrable-types": "off",
        // Требовать кавычки вокруг имен свойств литералов объекта - всегда.
        "quote-props": "off",
        // Предпочтения стрелочных функций
        "prefer-arrow/prefer-arrow-functions": "error",
        "prefer-const": "error",
        "quotes": "error",
        "radix": "error",
        "semi": "error",
        "space-before-function-paren": [
          "error",
          {
            "anonymous": "never",
            "asyncArrow": "always",
            "named": "never"
          }
        ],
        "use-isnan": "error",
        "valid-typeof": "error"
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    }
  ]
}
