// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace TariffCardService.DataAccess.Migrations
{
	/// <inheritdoc />
	public partial class initial : Migration
    {
	    /// <inheritdoc />
	    protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "CommissionComplexes",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    RegionGroupId = table.Column<int>(type: "integer", nullable: false),
                    SellerId = table.Column<int>(type: "integer", nullable: false),
                    SellerName = table.Column<string>(type: "text", nullable: false),
                    SellerType = table.Column<int>(type: "integer", nullable: false),
                    ComplexId = table.Column<long>(type: "bigint", nullable: false),
                    ComplexName = table.Column<string>(type: "text", nullable: false),
                    CommissionType = table.Column<int>(type: "integer", nullable: true),
                    MinCommissionValue = table.Column<decimal>(type: "numeric", nullable: true),
                    MaxCommissionValue = table.Column<decimal>(type: "numeric", nullable: true),
                    IsAdvancedBooking = table.Column<bool>(type: "boolean", nullable: false),
                    IsCommissionCalculatedFromTotalPrice = table.Column<bool>(type: "boolean", nullable: false),
                    IsSellerCommissionPrepayments = table.Column<bool>(type: "boolean", nullable: false),
                    ConditionsOfPaymentFees = table.Column<string>(type: "text", nullable: true),
                    HousesCount = table.Column<int>(type: "integer", nullable: false),
                    CrossRegionAdvancedBookingCoefficient = table.Column<decimal>(type: "numeric", nullable: false),
                    UrlLandingPrepaymentBooking = table.Column<string>(type: "text", nullable: true),
                    RealtyObjectType = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CommissionComplexes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SnapshotCatalog",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Date = table.Column<DateTime>(type: "timestamp without time zone", nullable: false),
                    Type = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SnapshotCatalog", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CommissionHouseGroups",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    CommissionComplexId = table.Column<long>(type: "bigint", nullable: false),
                    HouseId = table.Column<long>(type: "bigint", nullable: true),
                    HouseName = table.Column<string>(type: "text", nullable: false),
                    CommissionType = table.Column<int>(type: "integer", nullable: true),
                    CommissionValue = table.Column<decimal>(type: "numeric", nullable: true),
                    MinMaxCommissionType = table.Column<int>(type: "integer", nullable: false),
                    MinCommissionValue = table.Column<decimal>(type: "numeric", nullable: false),
                    MaxCommissionValue = table.Column<decimal>(type: "numeric", nullable: false),
                    ObjectsCount = table.Column<int>(type: "integer", nullable: false),
                    CrossRegionAdvancedBookingCoefficient = table.Column<decimal>(type: "numeric", nullable: false),
                    RealtyObjectType = table.Column<int>(type: "integer", nullable: false),
                    HasOverriding = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CommissionHouseGroups", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CommissionHouseGroups_CommissionComplexes_CommissionComplex~",
                        column: x => x.CommissionComplexId,
                        principalTable: "CommissionComplexes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ComplexSnapshots",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    SnapshotId = table.Column<long>(type: "bigint", nullable: false),
                    RegionGroupId = table.Column<int>(type: "integer", nullable: false),
                    SellerId = table.Column<int>(type: "integer", nullable: false),
                    SellerName = table.Column<string>(type: "text", nullable: false),
                    SellerType = table.Column<int>(type: "integer", nullable: false),
                    ComplexId = table.Column<long>(type: "bigint", nullable: false),
                    ComplexName = table.Column<string>(type: "text", nullable: false),
                    CommissionType = table.Column<int>(type: "integer", nullable: true),
                    MinCommissionValue = table.Column<decimal>(type: "numeric", nullable: true),
                    MaxCommissionValue = table.Column<decimal>(type: "numeric", nullable: true),
                    IsAdvancedBooking = table.Column<bool>(type: "boolean", nullable: false),
                    IsCommissionCalculatedFromTotalPrice = table.Column<bool>(type: "boolean", nullable: false),
                    IsSellerCommissionPrepayments = table.Column<bool>(type: "boolean", nullable: false),
                    ConditionsOfPaymentFees = table.Column<string>(type: "text", nullable: true),
                    HousesCount = table.Column<int>(type: "integer", nullable: false),
                    CrossRegionAdvancedBookingCoefficient = table.Column<decimal>(type: "numeric", nullable: false),
                    UrlLandingPrepaymentBooking = table.Column<string>(type: "text", nullable: true),
                    RealtyObjectType = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ComplexSnapshots", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ComplexSnapshots_SnapshotCatalog_SnapshotId",
                        column: x => x.SnapshotId,
                        principalTable: "SnapshotCatalog",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CommissionObjectGroups",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    CommissionHouseGroupId = table.Column<long>(type: "bigint", nullable: false),
                    Rooms = table.Column<int>(type: "integer", nullable: true),
                    ApartmentId = table.Column<long>(type: "bigint", nullable: true),
                    ApartmentDescription = table.Column<string>(type: "text", nullable: false),
                    RealtyObjectType = table.Column<int>(type: "integer", nullable: false),
                    CommissionType = table.Column<int>(type: "integer", nullable: false),
                    CommissionValue = table.Column<decimal>(type: "numeric", nullable: false),
                    CrossRegionAdvancedBookingCoefficient = table.Column<decimal>(type: "numeric", nullable: false),
                    IsOverriding = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CommissionObjectGroups", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CommissionObjectGroups_CommissionHouseGroups_CommissionHous~",
                        column: x => x.CommissionHouseGroupId,
                        principalTable: "CommissionHouseGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HouseSnapshots",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    ComplexSnapshotId = table.Column<long>(type: "bigint", nullable: false),
                    HouseId = table.Column<long>(type: "bigint", nullable: true),
                    HouseName = table.Column<string>(type: "text", nullable: false),
                    CommissionType = table.Column<int>(type: "integer", nullable: true),
                    CommissionValue = table.Column<decimal>(type: "numeric", nullable: true),
                    MinMaxCommissionType = table.Column<int>(type: "integer", nullable: false),
                    MinCommissionValue = table.Column<decimal>(type: "numeric", nullable: false),
                    MaxCommissionValue = table.Column<decimal>(type: "numeric", nullable: false),
                    ObjectsCount = table.Column<int>(type: "integer", nullable: false),
                    CrossRegionAdvancedBookingCoefficient = table.Column<decimal>(type: "numeric", nullable: false),
                    RealtyObjectType = table.Column<int>(type: "integer", nullable: false),
                    HasOverriding = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HouseSnapshots", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HouseSnapshots_ComplexSnapshots_ComplexSnapshotId",
                        column: x => x.ComplexSnapshotId,
                        principalTable: "ComplexSnapshots",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ObjectSnapshots",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    HouseSnapshotId = table.Column<long>(type: "bigint", nullable: false),
                    Rooms = table.Column<int>(type: "integer", nullable: true),
                    ApartmentId = table.Column<long>(type: "bigint", nullable: true),
                    ApartmentDescription = table.Column<string>(type: "text", nullable: false),
                    RealtyObjectType = table.Column<int>(type: "integer", nullable: false),
                    CommissionType = table.Column<int>(type: "integer", nullable: false),
                    CommissionValue = table.Column<decimal>(type: "numeric", nullable: false),
                    CrossRegionAdvancedBookingCoefficient = table.Column<decimal>(type: "numeric", nullable: false),
                    IsOverriding = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ObjectSnapshots", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ObjectSnapshots_HouseSnapshots_HouseSnapshotId",
                        column: x => x.HouseSnapshotId,
                        principalTable: "HouseSnapshots",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_CommissionComplexes_ComplexId_RealtyObjectType_SellerId_Sel~",
                table: "CommissionComplexes",
                columns: new[] { "ComplexId", "RealtyObjectType", "SellerId", "SellerType" });

            migrationBuilder.CreateIndex(
                name: "IX_CommissionHouseGroups_CommissionComplexId",
                table: "CommissionHouseGroups",
                column: "CommissionComplexId");

            migrationBuilder.CreateIndex(
                name: "IX_CommissionHouseGroups_HouseId_HouseName_RealtyObjectType",
                table: "CommissionHouseGroups",
                columns: new[] { "HouseId", "HouseName", "RealtyObjectType" });

            migrationBuilder.CreateIndex(
                name: "IX_CommissionObjectGroups_ApartmentDescription_ApartmentId_Rea~",
                table: "CommissionObjectGroups",
                columns: new[] { "ApartmentDescription", "ApartmentId", "RealtyObjectType" });

            migrationBuilder.CreateIndex(
                name: "IX_CommissionObjectGroups_CommissionHouseGroupId",
                table: "CommissionObjectGroups",
                column: "CommissionHouseGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ComplexSnapshots_ComplexId_RealtyObjectType_SellerId_Seller~",
                table: "ComplexSnapshots",
                columns: new[] { "ComplexId", "RealtyObjectType", "SellerId", "SellerType" });

            migrationBuilder.CreateIndex(
                name: "IX_ComplexSnapshots_SnapshotId",
                table: "ComplexSnapshots",
                column: "SnapshotId");

            migrationBuilder.CreateIndex(
                name: "IX_HouseSnapshots_ComplexSnapshotId",
                table: "HouseSnapshots",
                column: "ComplexSnapshotId");

            migrationBuilder.CreateIndex(
                name: "IX_HouseSnapshots_HouseId_HouseName_RealtyObjectType",
                table: "HouseSnapshots",
                columns: new[] { "HouseId", "HouseName", "RealtyObjectType" });

            migrationBuilder.CreateIndex(
                name: "IX_ObjectSnapshots_ApartmentDescription_ApartmentId_RealtyObje~",
                table: "ObjectSnapshots",
                columns: new[] { "ApartmentDescription", "ApartmentId", "RealtyObjectType" });

            migrationBuilder.CreateIndex(
                name: "IX_ObjectSnapshots_HouseSnapshotId",
                table: "ObjectSnapshots",
                column: "HouseSnapshotId");

            migrationBuilder.CreateIndex(
                name: "IX_SnapshotCatalog_Date",
                table: "SnapshotCatalog",
                column: "Date",
                unique: true);
        }

	    /// <inheritdoc />
	    protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "CommissionObjectGroups");

            migrationBuilder.DropTable(
                name: "ObjectSnapshots");

            migrationBuilder.DropTable(
                name: "CommissionHouseGroups");

            migrationBuilder.DropTable(
                name: "HouseSnapshots");

            migrationBuilder.DropTable(
                name: "CommissionComplexes");

            migrationBuilder.DropTable(
                name: "ComplexSnapshots");

            migrationBuilder.DropTable(
                name: "SnapshotCatalog");
        }
    }
}
