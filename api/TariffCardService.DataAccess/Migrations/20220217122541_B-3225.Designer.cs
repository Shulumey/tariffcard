// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TariffCardService.DataAccess.Infrastructure;

namespace TariffCardService.DataAccess.Migrations
{
    [DbContext(typeof(TariffCardDbContext))]
    [Migration("20220217122541_B-3225")]
    partial class B3225
    {
	    /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.CommissionComplex", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CommissionType")
                        .HasColumnType("integer")
                        .HasColumnName("CommissionType");

                    b.Property<long>("ComplexId")
                        .HasColumnType("bigint")
                        .HasColumnName("ComplexId");

                    b.Property<string>("ComplexName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ComplexName");

                    b.Property<string>("ConditionsOfPaymentFees")
                        .HasColumnType("text")
                        .HasColumnName("ConditionsOfPaymentFees");

                    b.Property<decimal>("CrossRegionAdvancedBookingCoefficient")
                        .HasColumnType("numeric")
                        .HasColumnName("CrossRegionAdvancedBookingCoefficient");

                    b.Property<int>("HousesCount")
                        .HasColumnType("integer")
                        .HasColumnName("HousesCount");

                    b.Property<bool>("IsAdvancedBooking")
                        .HasColumnType("boolean")
                        .HasColumnName("IsAdvancedBooking");

                    b.Property<bool>("IsCommissionCalculatedFromTotalPrice")
                        .HasColumnType("boolean")
                        .HasColumnName("IsCommissionCalculatedFromTotalPrice");

                    b.Property<bool>("IsSellerCommissionPrepayments")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSellerCommissionPrepayments");

                    b.Property<decimal?>("MaxCommissionValue")
                        .HasColumnType("numeric")
                        .HasColumnName("MaxCommissionValue");

                    b.Property<decimal?>("MinCommissionValue")
                        .HasColumnType("numeric")
                        .HasColumnName("MinCommissionValue");

                    b.Property<int>("RealtyObjectType")
                        .HasColumnType("integer")
                        .HasColumnName("RealtyObjectType");

                    b.Property<int>("RegionGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("RegionGroupId");

                    b.Property<int?>("SellerId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("SellerId");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SellerName");

                    b.Property<int>("SellerType")
                        .HasColumnType("integer")
                        .HasColumnName("SellerType");

                    b.Property<string>("UrlLandingPrepaymentBooking")
                        .HasColumnType("text")
                        .HasColumnName("UrlLandingPrepaymentBooking");

                    b.HasKey("Id");

                    b.HasIndex("ComplexId", "RealtyObjectType", "SellerId", "SellerType");

                    b.ToTable("CommissionComplexes");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.CommissionHouseGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CommissionType")
                        .HasColumnType("integer")
                        .HasColumnName("CommissionType");

                    b.Property<decimal?>("CommissionValue")
                        .HasColumnType("numeric")
                        .HasColumnName("CommissionValue");

                    b.Property<long>("ComplexId")
                        .HasColumnType("bigint")
                        .HasColumnName("CommissionComplexId");

                    b.Property<decimal?>("CrossRegionAdvancedBookingCoefficient")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("CrossRegionAdvancedBookingCoefficient");

                    b.Property<bool>("HasOverriding")
                        .HasColumnType("boolean")
                        .HasColumnName("HasOverriding");

                    b.Property<long?>("HouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("HouseId");

                    b.Property<string>("HouseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("HouseName");

                    b.Property<decimal?>("MaxCommissionValue")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("MaxCommissionValue");

                    b.Property<decimal?>("MinCommissionValue")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("MinCommissionValue");

                    b.Property<int>("MinMaxCommissionType")
                        .HasColumnType("integer")
                        .HasColumnName("MinMaxCommissionType");

                    b.Property<int>("ObjectsCount")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectsCount");

                    b.Property<int>("RealtyObjectType")
                        .HasColumnType("integer")
                        .HasColumnName("RealtyObjectType");

                    b.HasKey("Id");

                    b.HasIndex("ComplexId");

                    b.HasIndex("HouseId", "HouseName", "RealtyObjectType");

                    b.ToTable("CommissionHouseGroups");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.CommissionObjectGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApartmentDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ApartmentDescription");

                    b.Property<long?>("ApartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApartmentId");

                    b.Property<int>("CommissionType")
                        .HasColumnType("integer")
                        .HasColumnName("CommissionType");

                    b.Property<decimal?>("CommissionValue")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("CommissionValue");

                    b.Property<decimal?>("CrossRegionAdvancedBookingCoefficient")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("CrossRegionAdvancedBookingCoefficient");

                    b.Property<long>("HouseGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CommissionHouseGroupId");

                    b.Property<bool>("IsOverriding")
                        .HasColumnType("boolean")
                        .HasColumnName("IsOverriding");

                    b.Property<int>("RealtyObjectType")
                        .HasColumnType("integer")
                        .HasColumnName("RealtyObjectType");

                    b.Property<int?>("Rooms")
                        .HasColumnType("integer")
                        .HasColumnName("Rooms");

                    b.HasKey("Id");

                    b.HasIndex("HouseGroupId");

                    b.HasIndex("ApartmentDescription", "ApartmentId", "RealtyObjectType");

                    b.ToTable("CommissionObjectGroups");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.ComplexSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CommissionType")
                        .HasColumnType("integer")
                        .HasColumnName("CommissionType");

                    b.Property<long?>("ComplexId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("ComplexId");

                    b.Property<string>("ComplexName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ComplexName");

                    b.Property<string>("ConditionsOfPaymentFees")
                        .HasColumnType("text")
                        .HasColumnName("ConditionsOfPaymentFees");

                    b.Property<decimal?>("CrossRegionAdvancedBookingCoefficient")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("CrossRegionAdvancedBookingCoefficient");

                    b.Property<int>("HousesCount")
                        .HasColumnType("integer")
                        .HasColumnName("HousesCount");

                    b.Property<bool?>("IsAdvancedBooking")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("IsAdvancedBooking");

                    b.Property<bool?>("IsCommissionCalculatedFromTotalPrice")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("IsCommissionCalculatedFromTotalPrice");

                    b.Property<bool>("IsSellerCommissionPrepayments")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSellerCommissionPrepayments");

                    b.Property<decimal?>("MaxCommissionValue")
                        .HasColumnType("numeric")
                        .HasColumnName("MaxCommissionValue");

                    b.Property<decimal?>("MinCommissionValue")
                        .HasColumnType("numeric")
                        .HasColumnName("MinCommissionValue");

                    b.Property<int>("RealtyObjectType")
                        .HasColumnType("integer")
                        .HasColumnName("RealtyObjectType");

                    b.Property<int>("RegionGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("RegionGroupId");

                    b.Property<int?>("SellerId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("SellerId");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SellerName");

                    b.Property<int>("SellerType")
                        .HasColumnType("integer")
                        .HasColumnName("SellerType");

                    b.Property<long?>("SnapshotId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("SnapshotId");

                    b.Property<string>("UrlLandingPrepaymentBooking")
                        .HasColumnType("text")
                        .HasColumnName("UrlLandingPrepaymentBooking");

                    b.HasKey("Id");

                    b.HasIndex("SnapshotId");

                    b.HasIndex("ComplexId", "RealtyObjectType", "SellerId", "SellerType");

                    b.ToTable("ComplexSnapshots");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.HouseSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CommissionType")
                        .HasColumnType("integer")
                        .HasColumnName("CommissionType");

                    b.Property<decimal?>("CommissionValue")
                        .HasColumnType("numeric")
                        .HasColumnName("CommissionValue");

                    b.Property<long>("ComplexSnapshotId")
                        .HasColumnType("bigint")
                        .HasColumnName("ComplexSnapshotId");

                    b.Property<decimal?>("CrossRegionAdvancedBookingCoefficient")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("CrossRegionAdvancedBookingCoefficient");

                    b.Property<bool>("HasOverriding")
                        .HasColumnType("boolean")
                        .HasColumnName("HasOverriding");

                    b.Property<long?>("HouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("HouseId");

                    b.Property<string>("HouseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("HouseName");

                    b.Property<decimal?>("MaxCommissionValue")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("MaxCommissionValue");

                    b.Property<decimal?>("MinCommissionValue")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("MinCommissionValue");

                    b.Property<int>("MinMaxCommissionType")
                        .HasColumnType("integer")
                        .HasColumnName("MinMaxCommissionType");

                    b.Property<int>("ObjectsCount")
                        .HasColumnType("integer")
                        .HasColumnName("ObjectsCount");

                    b.Property<int?>("RealtyObjectType")
                        .HasColumnType("integer")
                        .HasColumnName("RealtyObjectType");

                    b.HasKey("Id");

                    b.HasIndex("ComplexSnapshotId");

                    b.HasIndex("HouseId", "HouseName", "RealtyObjectType");

                    b.ToTable("HouseSnapshots");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.ObjectSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApartmentDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ApartmentDescription");

                    b.Property<long?>("ApartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("ApartmentId");

                    b.Property<int>("CommissionType")
                        .HasColumnType("integer")
                        .HasColumnName("CommissionType");

                    b.Property<decimal?>("CommissionValue")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("CommissionValue");

                    b.Property<decimal?>("CrossRegionAdvancedBookingCoefficient")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("CrossRegionAdvancedBookingCoefficient");

                    b.Property<long>("HouseSnapshotId")
                        .HasColumnType("bigint")
                        .HasColumnName("HouseSnapshotId");

                    b.Property<bool>("IsOverriding")
                        .HasColumnType("boolean")
                        .HasColumnName("IsOverriding");

                    b.Property<int>("RealtyObjectType")
                        .HasColumnType("integer")
                        .HasColumnName("RealtyObjectType");

                    b.Property<int?>("Rooms")
                        .HasColumnType("integer")
                        .HasColumnName("Rooms");

                    b.HasKey("Id");

                    b.HasIndex("HouseSnapshotId");

                    b.HasIndex("ApartmentDescription", "ApartmentId", "RealtyObjectType");

                    b.ToTable("ObjectSnapshots");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.SearchParamAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActualValue")
                        .HasColumnType("text")
                        .HasColumnName("DisplayName");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("Alias");

                    b.Property<int>("RegionalGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("RegionGroupId");

                    b.HasKey("Id");

                    b.HasIndex("Alias", "ActualValue");

                    b.ToTable("SearchParamsAliases");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.SnapshotCatalog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("SnapshotCatalog");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.CommissionHouseGroup", b =>
                {
                    b.HasOne("TariffCardService.DataAccess.Entities.CommissionComplex", null)
                        .WithMany("HouseGroups")
                        .HasForeignKey("ComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.CommissionObjectGroup", b =>
                {
                    b.HasOne("TariffCardService.DataAccess.Entities.CommissionHouseGroup", null)
                        .WithMany("ObjectGroups")
                        .HasForeignKey("HouseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.ComplexSnapshot", b =>
                {
                    b.HasOne("TariffCardService.DataAccess.Entities.SnapshotCatalog", null)
                        .WithMany("Complexes")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.HouseSnapshot", b =>
                {
                    b.HasOne("TariffCardService.DataAccess.Entities.ComplexSnapshot", null)
                        .WithMany("HouseSnapshots")
                        .HasForeignKey("ComplexSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.ObjectSnapshot", b =>
                {
                    b.HasOne("TariffCardService.DataAccess.Entities.HouseSnapshot", null)
                        .WithMany("ObjectGroups")
                        .HasForeignKey("HouseSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.CommissionComplex", b =>
                {
                    b.Navigation("HouseGroups");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.CommissionHouseGroup", b =>
                {
                    b.Navigation("ObjectGroups");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.ComplexSnapshot", b =>
                {
                    b.Navigation("HouseSnapshots");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.HouseSnapshot", b =>
                {
                    b.Navigation("ObjectGroups");
                });

            modelBuilder.Entity("TariffCardService.DataAccess.Entities.SnapshotCatalog", b =>
                {
                    b.Navigation("Complexes");
                });
#pragma warning restore 612, 618
        }
    }
}
